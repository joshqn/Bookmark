//
//  StyleKit.swift
//  Bookmark
//
//  Created by Joshua Kuehn on 5/25/16.
//  Copyright (c) 2016 KuehnLLC. All rights reserved.
//
//  Generated by PaintCode (www.paintcodeapp.com)
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let mainTintColor: UIColor = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)
        static var imageOfCanvas1: UIImage?
        static var canvas1Targets: [AnyObject]?
        static var imageOfBookmarkid: UIImage?
        static var bookmarkidTargets: [AnyObject]?
        static var imageOfBookmarkidSelected: UIImage?
        static var bookmarkidSelectedTargets: [AnyObject]?
        static var imageOfSettingsButtonImage: UIImage?
        static var settingsButtonImageTargets: [AnyObject]?
        static var imageOfPopUpViewBM: UIImage?
        static var popUpViewBMTargets: [AnyObject]?
        static var imageOfTabBarBMImage: UIImage?
        static var tabBarBMImageTargets: [AnyObject]?
        static var imageOfTabBarArchiveImage: UIImage?
        static var tabBarArchiveImageTargets: [AnyObject]?
        static var imageOfTBCellButtonBMImageFlat: UIImage?
        static var tBCellButtonBMImageFlatTargets: [AnyObject]?
        static var imageOfNavBarCogButtonImageFlat: UIImage?
        static var navBarCogButtonImageFlatTargets: [AnyObject]?
        static var imageOfTabBarBMSelectedBMImage: UIImage?
        static var tabBarBMSelectedBMImageTargets: [AnyObject]?
        static var imageOfTabBarBMImageFlat: UIImage?
        static var tabBarBMImageFlatTargets: [AnyObject]?
        static var imageOfTabBarArchiveSelectedImage: UIImage?
        static var tabBarArchiveSelectedImageTargets: [AnyObject]?
        static var imageOfTabBarArchiveImageFlat: UIImage?
        static var tabBarArchiveImageFlatTargets: [AnyObject]?
        static var imageOfBlankImageArtwork: UIImage?
        static var blankImageArtworkTargets: [AnyObject]?
    }

    //// Colors

    public class var mainTintColor: UIColor { return Cache.mainTintColor }

    //// Drawing Methods

    public class func drawCanvas1() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor = UIColor(red: 0.971, green: 0.907, blue: 0.109, alpha: 1.000)
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor7 = UIColor(red: 0.816, green: 0.008, blue: 0.107, alpha: 1.000)
        let fillColor11 = UIColor(red: 0.256, green: 0.460, blue: 0.020, alpha: 1.000)
        let fillColor12 = UIColor(red: 0.564, green: 0.073, blue: 0.995, alpha: 1.000)
        let fillColor13 = UIColor(red: 0.191, green: 0.143, blue: 1.000, alpha: 1.000)
        let fillColor14 = UIColor(red: 0.740, green: 0.061, blue: 0.879, alpha: 1.000)
        let fillColor15 = UIColor(red: 0.962, green: 0.650, blue: 0.139, alpha: 1.000)
        let fillColor16 = UIColor(red: 0.721, green: 0.913, blue: 0.527, alpha: 1.000)
        let fillColor17 = UIColor(red: 0.000, green: 0.866, blue: 1.000, alpha: 1.000)
        let fillColor18 = UIColor(red: 0.494, green: 0.826, blue: 0.130, alpha: 1.000)
        let fillColor19 = UIColor(red: 0.314, green: 0.888, blue: 0.760, alpha: 1.000)
        let fillColor20 = UIColor(red: 0.289, green: 0.565, blue: 0.886, alpha: 1.000)
        let fillColor21 = UIColor(red: 0.000, green: 0.659, blue: 0.533, alpha: 1.000)

        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 4
        let clip4Path = UIBezierPath()
        clip4Path.moveToPoint(CGPoint(x: 40, y: 80))
        clip4Path.addCurveToPoint(CGPoint(x: 80, y: 40), controlPoint1: CGPoint(x: 62.09, y: 80), controlPoint2: CGPoint(x: 80, y: 62.09))
        clip4Path.addCurveToPoint(CGPoint(x: 40, y: 0), controlPoint1: CGPoint(x: 80, y: 17.91), controlPoint2: CGPoint(x: 62.09, y: 0))
        clip4Path.addCurveToPoint(CGPoint(x: 0, y: 40), controlPoint1: CGPoint(x: 17.91, y: 0), controlPoint2: CGPoint(x: 0, y: 17.91))
        clip4Path.addCurveToPoint(CGPoint(x: 40, y: 80), controlPoint1: CGPoint(x: 0, y: 62.09), controlPoint2: CGPoint(x: 17.91, y: 80))
        clip4Path.closePath()
        clip4Path.usesEvenOddFillRule = true;

        clip4Path.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -5, y: -5, width: 90, height: 90))
        fillColor5.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 57.95, y: 11.02, width: 14.7, height: 12.85), cornerRadius: 5)
        fillColor11.setFill()
        rectangle2Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: 72.68, y: 45.95, width: 12.85, height: 13.8), cornerRadius: 5)
        fillColor13.setFill()
        rectangle3Path.fill()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: 41.38, y: 59.77, width: 44.15, height: 12.85), cornerRadius: 5)
        fillColor7.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: 6.45, y: -3.7, width: 32.2, height: 18.4), cornerRadius: 5)
        fillColor14.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(roundedRect: CGRect(x: 7.35, y: 14.72, width: 14.7, height: 16.55), cornerRadius: 5)
        fillColor15.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(roundedRect: CGRect(x: 22.98, y: 14.7, width: 15.65, height: 42.3), cornerRadius: 5)
        fillColor16.setFill()
        rectangle7Path.fill()


        //// Group 4
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath(roundedRect: CGRect(x: 57.95, y: 23.93, width: 14.7, height: 35.85), cornerRadius: 5)
        clipPath.addClip()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 52.95, y: 18.93, width: 24.7, height: 45.85))
        fillColor12.setFill()
        rectangle8Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(roundedRect: CGRect(x: 22.98, y: 57.02, width: 17.45, height: 30.35), cornerRadius: 5)
        fillColor.setFill()
        rectangle10Path.fill()


        //// Group 5
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 2
        let clip2Path = UIBezierPath(roundedRect: CGRect(x: 58.88, y: 72.65, width: 26.65, height: 13.8), cornerRadius: 5)
        clip2Path.addClip()


        //// Rectangle 11 Drawing
        let rectangle11Path = UIBezierPath(rect: CGRect(x: 53.88, y: 67.65, width: 36.65, height: 23.8))
        fillColor17.setFill()
        rectangle11Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Rectangle 13 Drawing
        let rectangle13Path = UIBezierPath(roundedRect: CGRect(x: 41.38, y: 72.65, width: 17.45, height: 14.7), cornerRadius: 5)
        fillColor18.setFill()
        rectangle13Path.fill()


        //// Rectangle 14 Drawing
        let rectangle14Path = UIBezierPath(roundedRect: CGRect(x: 40.48, y: 51.5, width: 16.55, height: 8.3), cornerRadius: 4.15)
        fillColor19.setFill()
        rectangle14Path.fill()


        //// Group 6
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath(roundedRect: CGRect(x: 7.33, y: 31.25, width: 15.65, height: 56.1), cornerRadius: 5)
        clip3Path.addClip()


        //// Rectangle 15 Drawing
        let rectangle15Path = UIBezierPath(rect: CGRect(x: 2.32, y: 26.25, width: 25.65, height: 66.1))
        fillColor20.setFill()
        rectangle15Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Rectangle 17 Drawing
        let rectangle17Path = UIBezierPath(roundedRect: CGRect(x: 39.55, y: -12.88, width: 18.4, height: 63.45), cornerRadius: 5)
        fillColor21.setFill()
        rectangle17Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawBookmarkid() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 29.6, height: 31.7))
        StyleKit.mainTintColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 10.08, y: 6.92))
        clipPath.addLineToPoint(CGPoint(x: 23.55, y: 6.92))
        clipPath.addLineToPoint(CGPoint(x: 23.55, y: 28.78))
        clipPath.addLineToPoint(CGPoint(x: 10.08, y: 28.78))
        clipPath.addLineToPoint(CGPoint(x: 10.08, y: 6.92))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 16.81, y: 21.13))
        clipPath.addLineToPoint(CGPoint(x: 22.98, y: 28.78))
        clipPath.addLineToPoint(CGPoint(x: 10.64, y: 28.78))
        clipPath.addLineToPoint(CGPoint(x: 16.81, y: 21.13))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 10.08, y: 6.92))
        bezierPath.addLineToPoint(CGPoint(x: 23.55, y: 6.92))
        bezierPath.addLineToPoint(CGPoint(x: 23.55, y: 28.78))
        bezierPath.addLineToPoint(CGPoint(x: 10.08, y: 28.78))
        bezierPath.addLineToPoint(CGPoint(x: 10.08, y: 6.92))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 16.81, y: 21.13))
        bezierPath.addLineToPoint(CGPoint(x: 22.98, y: 28.78))
        bezierPath.addLineToPoint(CGPoint(x: 10.64, y: 28.78))
        bezierPath.addLineToPoint(CGPoint(x: 16.81, y: 21.13))
        bezierPath.closePath()
        StyleKit.mainTintColor.setStroke()
        bezierPath.lineWidth = 4
        bezierPath.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawBookmarkidSelected() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 2, y: 2, width: 29.6, height: 31.7))
        StyleKit.mainTintColor.setStroke()
        ovalPath.lineWidth = 2
        ovalPath.stroke()


        //// Group 3
        //// Group 4
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 10.08, y: 6.92))
        clipPath.addLineToPoint(CGPoint(x: 23.55, y: 6.92))
        clipPath.addLineToPoint(CGPoint(x: 23.55, y: 28.78))
        clipPath.addLineToPoint(CGPoint(x: 10.08, y: 28.78))
        clipPath.addLineToPoint(CGPoint(x: 10.08, y: 6.92))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 16.81, y: 21.13))
        clipPath.addLineToPoint(CGPoint(x: 22.98, y: 28.78))
        clipPath.addLineToPoint(CGPoint(x: 10.64, y: 28.78))
        clipPath.addLineToPoint(CGPoint(x: 16.81, y: 21.13))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 10.08, y: 6.92))
        bezierPath.addLineToPoint(CGPoint(x: 23.55, y: 6.92))
        bezierPath.addLineToPoint(CGPoint(x: 23.55, y: 28.78))
        bezierPath.addLineToPoint(CGPoint(x: 10.08, y: 28.78))
        bezierPath.addLineToPoint(CGPoint(x: 10.08, y: 6.92))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 16.81, y: 21.13))
        bezierPath.addLineToPoint(CGPoint(x: 22.98, y: 28.78))
        bezierPath.addLineToPoint(CGPoint(x: 10.64, y: 28.78))
        bezierPath.addLineToPoint(CGPoint(x: 16.81, y: 21.13))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        StyleKit.mainTintColor.setFill()
        bezierPath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)




        //// Group 5
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.moveToPoint(CGPoint(x: 10.08, y: 6.92))
        clip3Path.addLineToPoint(CGPoint(x: 23.55, y: 6.92))
        clip3Path.addLineToPoint(CGPoint(x: 23.55, y: 28.78))
        clip3Path.addLineToPoint(CGPoint(x: 10.08, y: 28.78))
        clip3Path.addLineToPoint(CGPoint(x: 10.08, y: 6.92))
        clip3Path.closePath()
        clip3Path.moveToPoint(CGPoint(x: 16.81, y: 21.13))
        clip3Path.addLineToPoint(CGPoint(x: 22.98, y: 28.78))
        clip3Path.addLineToPoint(CGPoint(x: 10.64, y: 28.78))
        clip3Path.addLineToPoint(CGPoint(x: 16.81, y: 21.13))
        clip3Path.closePath()
        clip3Path.usesEvenOddFillRule = true;

        clip3Path.addClip()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 10.08, y: 6.92))
        bezier4Path.addLineToPoint(CGPoint(x: 23.55, y: 6.92))
        bezier4Path.addLineToPoint(CGPoint(x: 23.55, y: 28.78))
        bezier4Path.addLineToPoint(CGPoint(x: 10.08, y: 28.78))
        bezier4Path.addLineToPoint(CGPoint(x: 10.08, y: 6.92))
        bezier4Path.closePath()
        bezier4Path.moveToPoint(CGPoint(x: 16.81, y: 21.13))
        bezier4Path.addLineToPoint(CGPoint(x: 22.98, y: 28.78))
        bezier4Path.addLineToPoint(CGPoint(x: 10.64, y: 28.78))
        bezier4Path.addLineToPoint(CGPoint(x: 16.81, y: 21.13))
        bezier4Path.closePath()
        StyleKit.mainTintColor.setStroke()
        bezier4Path.lineWidth = 4
        bezier4Path.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawSettingsButtonImage() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 3.2, y: 3.05, width: 20.6, height: 20.9))
        fillColor5.setFill()
        ovalPath.fill()


        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 11.92, y: -0.2))
        clipPath.addLineToPoint(CGPoint(x: 15.1, y: -0.2))
        clipPath.addLineToPoint(CGPoint(x: 15.88, y: 4.64))
        clipPath.addLineToPoint(CGPoint(x: 11.12, y: 4.64))
        clipPath.addLineToPoint(CGPoint(x: 11.92, y: -0.2))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 20.18, y: 1.49))
        clipPath.addLineToPoint(CGPoint(x: 22.75, y: 3.36))
        clipPath.addLineToPoint(CGPoint(x: 20.54, y: 7.73))
        clipPath.addLineToPoint(CGPoint(x: 16.69, y: 4.93))
        clipPath.addLineToPoint(CGPoint(x: 20.18, y: 1.49))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 25.89, y: 7.77))
        clipPath.addLineToPoint(CGPoint(x: 26.87, y: 10.79))
        clipPath.addLineToPoint(CGPoint(x: 22.51, y: 13.03))
        clipPath.addLineToPoint(CGPoint(x: 21.04, y: 8.5))
        clipPath.addLineToPoint(CGPoint(x: 25.89, y: 7.77))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 26.86, y: 16.23))
        clipPath.addLineToPoint(CGPoint(x: 25.88, y: 19.25))
        clipPath.addLineToPoint(CGPoint(x: 21.04, y: 18.5))
        clipPath.addLineToPoint(CGPoint(x: 22.51, y: 13.97))
        clipPath.addLineToPoint(CGPoint(x: 26.86, y: 16.23))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 22.73, y: 23.66))
        clipPath.addLineToPoint(CGPoint(x: 20.16, y: 25.52))
        clipPath.addLineToPoint(CGPoint(x: 16.69, y: 22.07))
        clipPath.addLineToPoint(CGPoint(x: 20.54, y: 19.27))
        clipPath.addLineToPoint(CGPoint(x: 22.73, y: 23.66))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 15.08, y: 27.2))
        clipPath.addLineToPoint(CGPoint(x: 11.9, y: 27.2))
        clipPath.addLineToPoint(CGPoint(x: 11.12, y: 22.36))
        clipPath.addLineToPoint(CGPoint(x: 15.88, y: 22.36))
        clipPath.addLineToPoint(CGPoint(x: 15.08, y: 27.2))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 6.82, y: 25.51))
        clipPath.addLineToPoint(CGPoint(x: 4.25, y: 23.64))
        clipPath.addLineToPoint(CGPoint(x: 6.46, y: 19.27))
        clipPath.addLineToPoint(CGPoint(x: 10.31, y: 22.07))
        clipPath.addLineToPoint(CGPoint(x: 6.82, y: 25.51))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 1.11, y: 19.23))
        clipPath.addLineToPoint(CGPoint(x: 0.13, y: 16.21))
        clipPath.addLineToPoint(CGPoint(x: 4.49, y: 13.97))
        clipPath.addLineToPoint(CGPoint(x: 5.96, y: 18.5))
        clipPath.addLineToPoint(CGPoint(x: 1.11, y: 19.23))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 0.14, y: 10.77))
        clipPath.addLineToPoint(CGPoint(x: 1.12, y: 7.75))
        clipPath.addLineToPoint(CGPoint(x: 5.96, y: 8.5))
        clipPath.addLineToPoint(CGPoint(x: 4.49, y: 13.03))
        clipPath.addLineToPoint(CGPoint(x: 0.14, y: 10.77))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 4.27, y: 3.34))
        clipPath.addLineToPoint(CGPoint(x: 6.84, y: 1.48))
        clipPath.addLineToPoint(CGPoint(x: 10.31, y: 4.93))
        clipPath.addLineToPoint(CGPoint(x: 6.46, y: 7.73))
        clipPath.addLineToPoint(CGPoint(x: 4.27, y: 3.34))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -4.88, y: -5.2, width: 36.75, height: 37.4))
        fillColor5.setFill()
        rectanglePath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalInRect: CGRect(x: 7.15, y: 7.05, width: 12.7, height: 12.9))
        StyleKit.mainTintColor.setFill()
        oval2Path.fill()
    }

    public class func drawPopUpViewBM() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)
        let fillColor22 = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)
        let strokeColor6 = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = UIColor.blackColor().colorWithAlphaComponent(0.5)
        shadow.shadowOffset = CGSize(width: 0.1, height: -0.1)
        shadow.shadowBlurRadius = 3

        //// Group 3
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 24, y: 44))
        bezierPath.addCurveToPoint(CGPoint(x: 44, y: 24), controlPoint1: CGPoint(x: 35.05, y: 44), controlPoint2: CGPoint(x: 44, y: 35.05))
        bezierPath.addCurveToPoint(CGPoint(x: 24, y: 4), controlPoint1: CGPoint(x: 44, y: 12.95), controlPoint2: CGPoint(x: 35.05, y: 4))
        bezierPath.addCurveToPoint(CGPoint(x: 4, y: 24), controlPoint1: CGPoint(x: 12.95, y: 4), controlPoint2: CGPoint(x: 4, y: 12.95))
        bezierPath.addCurveToPoint(CGPoint(x: 24, y: 44), controlPoint1: CGPoint(x: 4, y: 35.05), controlPoint2: CGPoint(x: 12.95, y: 44))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        CGContextSaveGState(context)
        CGContextSetShadowWithColor(context, shadow.shadowOffset, shadow.shadowBlurRadius, (shadow.shadowColor as! UIColor).CGColor)
        fillColor5.setFill()
        bezierPath.fill()
        CGContextRestoreGState(context)



        //// Group 4
        //// Group 5
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 16, y: 11))
        clipPath.addLineToPoint(CGPoint(x: 32, y: 11))
        clipPath.addLineToPoint(CGPoint(x: 32, y: 37))
        clipPath.addLineToPoint(CGPoint(x: 16, y: 37))
        clipPath.addLineToPoint(CGPoint(x: 16, y: 11))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 24, y: 27.9))
        clipPath.addLineToPoint(CGPoint(x: 31.33, y: 37))
        clipPath.addLineToPoint(CGPoint(x: 16.67, y: 37))
        clipPath.addLineToPoint(CGPoint(x: 24, y: 27.9))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 16, y: 11))
        bezier2Path.addLineToPoint(CGPoint(x: 32, y: 11))
        bezier2Path.addLineToPoint(CGPoint(x: 32, y: 37))
        bezier2Path.addLineToPoint(CGPoint(x: 16, y: 37))
        bezier2Path.addLineToPoint(CGPoint(x: 16, y: 11))
        bezier2Path.closePath()
        bezier2Path.moveToPoint(CGPoint(x: 24, y: 27.9))
        bezier2Path.addLineToPoint(CGPoint(x: 31.33, y: 37))
        bezier2Path.addLineToPoint(CGPoint(x: 16.67, y: 37))
        bezier2Path.addLineToPoint(CGPoint(x: 24, y: 27.9))
        bezier2Path.closePath()
        fillColor22.setFill()
        bezier2Path.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)




        //// Group 6
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip 3
        let clip3Path = UIBezierPath()
        clip3Path.moveToPoint(CGPoint(x: 16, y: 11))
        clip3Path.addLineToPoint(CGPoint(x: 32, y: 11))
        clip3Path.addLineToPoint(CGPoint(x: 32, y: 37))
        clip3Path.addLineToPoint(CGPoint(x: 16, y: 37))
        clip3Path.addLineToPoint(CGPoint(x: 16, y: 11))
        clip3Path.closePath()
        clip3Path.moveToPoint(CGPoint(x: 24, y: 27.9))
        clip3Path.addLineToPoint(CGPoint(x: 31.33, y: 37))
        clip3Path.addLineToPoint(CGPoint(x: 16.67, y: 37))
        clip3Path.addLineToPoint(CGPoint(x: 24, y: 27.9))
        clip3Path.closePath()
        clip3Path.usesEvenOddFillRule = true;

        clip3Path.addClip()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.moveToPoint(CGPoint(x: 16, y: 11))
        bezier5Path.addLineToPoint(CGPoint(x: 32, y: 11))
        bezier5Path.addLineToPoint(CGPoint(x: 32, y: 37))
        bezier5Path.addLineToPoint(CGPoint(x: 16, y: 37))
        bezier5Path.addLineToPoint(CGPoint(x: 16, y: 11))
        bezier5Path.closePath()
        bezier5Path.moveToPoint(CGPoint(x: 24, y: 27.9))
        bezier5Path.addLineToPoint(CGPoint(x: 31.33, y: 37))
        bezier5Path.addLineToPoint(CGPoint(x: 16.67, y: 37))
        bezier5Path.addLineToPoint(CGPoint(x: 24, y: 27.9))
        bezier5Path.closePath()
        strokeColor6.setStroke()
        bezier5Path.lineWidth = 4.6
        bezier5Path.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawTabBarBMImage() {

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 0, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 13, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 13, y: 23))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 23))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 6.5, y: 14.95))
        bezierPath.addLineToPoint(CGPoint(x: 12.46, y: 23))
        bezierPath.addLineToPoint(CGPoint(x: 0.54, y: 23))
        bezierPath.addLineToPoint(CGPoint(x: 6.5, y: 14.95))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        StyleKit.mainTintColor.setFill()
        bezierPath.fill()
    }

    public class func drawTabBarArchiveImage() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor5 = UIColor(red: 1.000, green: 1.000, blue: 1.000, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 6, y: 14.5))
        bezierPath.addCurveToPoint(CGPoint(x: 7.49, y: 13), controlPoint1: CGPoint(x: 6, y: 13.67), controlPoint2: CGPoint(x: 6.67, y: 13))
        bezierPath.addLineToPoint(CGPoint(x: 26.51, y: 13))
        bezierPath.addCurveToPoint(CGPoint(x: 28, y: 14.5), controlPoint1: CGPoint(x: 27.33, y: 13), controlPoint2: CGPoint(x: 28, y: 13.67))
        bezierPath.addLineToPoint(CGPoint(x: 28, y: 14.5))
        bezierPath.addCurveToPoint(CGPoint(x: 26.51, y: 16), controlPoint1: CGPoint(x: 28, y: 15.33), controlPoint2: CGPoint(x: 27.33, y: 16))
        bezierPath.addLineToPoint(CGPoint(x: 7.49, y: 16))
        bezierPath.addCurveToPoint(CGPoint(x: 6, y: 14.5), controlPoint1: CGPoint(x: 6.67, y: 16), controlPoint2: CGPoint(x: 6, y: 15.33))
        bezierPath.addLineToPoint(CGPoint(x: 6, y: 14.5))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor5.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 7, y: 9.5))
        bezier2Path.addCurveToPoint(CGPoint(x: 8.49, y: 8), controlPoint1: CGPoint(x: 7, y: 8.67), controlPoint2: CGPoint(x: 7.67, y: 8))
        bezier2Path.addLineToPoint(CGPoint(x: 27.51, y: 8))
        bezier2Path.addCurveToPoint(CGPoint(x: 29, y: 9.5), controlPoint1: CGPoint(x: 28.33, y: 8), controlPoint2: CGPoint(x: 29, y: 8.67))
        bezier2Path.addLineToPoint(CGPoint(x: 29, y: 9.5))
        bezier2Path.addCurveToPoint(CGPoint(x: 27.51, y: 11), controlPoint1: CGPoint(x: 29, y: 10.33), controlPoint2: CGPoint(x: 28.33, y: 11))
        bezier2Path.addLineToPoint(CGPoint(x: 8.49, y: 11))
        bezier2Path.addCurveToPoint(CGPoint(x: 7, y: 9.5), controlPoint1: CGPoint(x: 7.67, y: 11), controlPoint2: CGPoint(x: 7, y: 10.33))
        bezier2Path.addLineToPoint(CGPoint(x: 7, y: 9.5))
        bezier2Path.closePath()
        bezier2Path.usesEvenOddFillRule = true;

        fillColor5.setFill()
        bezier2Path.fill()


        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 1.39, y: 21.65))
        clipPath.addCurveToPoint(CGPoint(x: 0.32, y: 19.82), controlPoint1: CGPoint(x: 0.58, y: 21.44), controlPoint2: CGPoint(x: 0.11, y: 20.62))
        clipPath.addLineToPoint(CGPoint(x: 5.24, y: 1.46))
        clipPath.addCurveToPoint(CGPoint(x: 7.08, y: 0.4), controlPoint1: CGPoint(x: 5.46, y: 0.66), controlPoint2: CGPoint(x: 6.27, y: 0.19))
        clipPath.addLineToPoint(CGPoint(x: 7.08, y: 0.4))
        clipPath.addCurveToPoint(CGPoint(x: 8.14, y: 2.23), controlPoint1: CGPoint(x: 7.88, y: 0.62), controlPoint2: CGPoint(x: 8.35, y: 1.44))
        clipPath.addLineToPoint(CGPoint(x: 3.22, y: 20.6))
        clipPath.addCurveToPoint(CGPoint(x: 1.39, y: 21.65), controlPoint1: CGPoint(x: 3.01, y: 21.39), controlPoint2: CGPoint(x: 2.19, y: 21.87))
        clipPath.addLineToPoint(CGPoint(x: 1.39, y: 21.65))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4.25, 11.05)
        CGContextRotateCTM(context, 15 * CGFloat(M_PI) / 180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -6.5, y: -16, width: 13, height: 32))
        fillColor5.setFill()
        rectanglePath.fill()

        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 5, y: 19.5))
        bezier4Path.addCurveToPoint(CGPoint(x: 6.49, y: 18), controlPoint1: CGPoint(x: 5, y: 18.67), controlPoint2: CGPoint(x: 5.67, y: 18))
        bezier4Path.addLineToPoint(CGPoint(x: 25.51, y: 18))
        bezier4Path.addCurveToPoint(CGPoint(x: 27, y: 19.5), controlPoint1: CGPoint(x: 26.33, y: 18), controlPoint2: CGPoint(x: 27, y: 18.67))
        bezier4Path.addLineToPoint(CGPoint(x: 27, y: 19.5))
        bezier4Path.addCurveToPoint(CGPoint(x: 25.51, y: 21), controlPoint1: CGPoint(x: 27, y: 20.33), controlPoint2: CGPoint(x: 26.33, y: 21))
        bezier4Path.addLineToPoint(CGPoint(x: 6.49, y: 21))
        bezier4Path.addCurveToPoint(CGPoint(x: 5, y: 19.5), controlPoint1: CGPoint(x: 5.67, y: 21), controlPoint2: CGPoint(x: 5, y: 20.33))
        bezier4Path.addLineToPoint(CGPoint(x: 5, y: 19.5))
        bezier4Path.closePath()
        bezier4Path.usesEvenOddFillRule = true;

        fillColor5.setFill()
        bezier4Path.fill()
    }

    public class func drawTBCellButtonBMImageFlat() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor8 = UIColor(red: 0.290, green: 0.290, blue: 0.290, alpha: 1.000)

        //// Group 2
        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalInRect: CGRect(x: 1, y: 1, width: 29.6, height: 31.7))
        strokeColor8.setStroke()
        ovalPath.lineWidth = 1
        ovalPath.stroke()


        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 10, y: 6))
        clipPath.addLineToPoint(CGPoint(x: 22, y: 6))
        clipPath.addLineToPoint(CGPoint(x: 22, y: 29))
        clipPath.addLineToPoint(CGPoint(x: 10, y: 29))
        clipPath.addLineToPoint(CGPoint(x: 10, y: 6))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 16, y: 20.95))
        clipPath.addLineToPoint(CGPoint(x: 21.5, y: 29))
        clipPath.addLineToPoint(CGPoint(x: 10.5, y: 29))
        clipPath.addLineToPoint(CGPoint(x: 16, y: 20.95))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 10, y: 6))
        bezierPath.addLineToPoint(CGPoint(x: 22, y: 6))
        bezierPath.addLineToPoint(CGPoint(x: 22, y: 29))
        bezierPath.addLineToPoint(CGPoint(x: 10, y: 29))
        bezierPath.addLineToPoint(CGPoint(x: 10, y: 6))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 16, y: 20.95))
        bezierPath.addLineToPoint(CGPoint(x: 21.5, y: 29))
        bezierPath.addLineToPoint(CGPoint(x: 10.5, y: 29))
        bezierPath.addLineToPoint(CGPoint(x: 16, y: 20.95))
        bezierPath.closePath()
        strokeColor8.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawNavBarCogButtonImageFlat() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor23 = UIColor(red: 0.608, green: 0.608, blue: 0.608, alpha: 1.000)

        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 6.81, y: 6.9))
        clipPath.addCurveToPoint(CGPoint(x: 5.25, y: 8.93), controlPoint1: CGPoint(x: 6.21, y: 7.5), controlPoint2: CGPoint(x: 5.68, y: 8.18))
        clipPath.addLineToPoint(CGPoint(x: 2.2, y: 8.47))
        clipPath.addLineToPoint(CGPoint(x: 1.24, y: 11.4))
        clipPath.addLineToPoint(CGPoint(x: 3.96, y: 12.83))
        clipPath.addCurveToPoint(CGPoint(x: 3.89, y: 14), controlPoint1: CGPoint(x: 3.91, y: 13.21), controlPoint2: CGPoint(x: 3.89, y: 13.6))
        clipPath.addCurveToPoint(CGPoint(x: 3.96, y: 15.21), controlPoint1: CGPoint(x: 3.89, y: 14.41), controlPoint2: CGPoint(x: 3.91, y: 14.81))
        clipPath.addLineToPoint(CGPoint(x: 1.24, y: 16.63))
        clipPath.addLineToPoint(CGPoint(x: 2.19, y: 19.56))
        clipPath.addLineToPoint(CGPoint(x: 5.27, y: 19.11))
        clipPath.addCurveToPoint(CGPoint(x: 6.7, y: 21), controlPoint1: CGPoint(x: 5.68, y: 19.79), controlPoint2: CGPoint(x: 6.15, y: 20.43))
        clipPath.addLineToPoint(CGPoint(x: 5.47, y: 23.46))
        clipPath.addLineToPoint(CGPoint(x: 7.97, y: 25.27))
        clipPath.addLineToPoint(CGPoint(x: 10, y: 23.29))
        clipPath.addCurveToPoint(CGPoint(x: 11.88, y: 23.89), controlPoint1: CGPoint(x: 10.6, y: 23.55), controlPoint2: CGPoint(x: 11.22, y: 23.75))
        clipPath.addLineToPoint(CGPoint(x: 12.35, y: 26.78))
        clipPath.addLineToPoint(CGPoint(x: 15.44, y: 26.78))
        clipPath.addLineToPoint(CGPoint(x: 15.93, y: 23.93))
        clipPath.addCurveToPoint(CGPoint(x: 18.45, y: 23.08), controlPoint1: CGPoint(x: 16.82, y: 23.76), controlPoint2: CGPoint(x: 17.66, y: 23.47))
        clipPath.addLineToPoint(CGPoint(x: 20.69, y: 25.29))
        clipPath.addLineToPoint(CGPoint(x: 23.18, y: 23.47))
        clipPath.addLineToPoint(CGPoint(x: 21.73, y: 20.52))
        clipPath.addCurveToPoint(CGPoint(x: 22.72, y: 19.11), controlPoint1: CGPoint(x: 22.1, y: 20.08), controlPoint2: CGPoint(x: 22.43, y: 19.61))
        clipPath.addLineToPoint(CGPoint(x: 25.82, y: 19.58))
        clipPath.addLineToPoint(CGPoint(x: 26.78, y: 16.64))
        clipPath.addLineToPoint(CGPoint(x: 24.04, y: 15.21))
        clipPath.addCurveToPoint(CGPoint(x: 24.11, y: 14), controlPoint1: CGPoint(x: 24.09, y: 14.81), controlPoint2: CGPoint(x: 24.11, y: 14.41))
        clipPath.addCurveToPoint(CGPoint(x: 24.05, y: 12.84), controlPoint1: CGPoint(x: 24.11, y: 13.61), controlPoint2: CGPoint(x: 24.09, y: 13.22))
        clipPath.addLineToPoint(CGPoint(x: 26.78, y: 11.42))
        clipPath.addLineToPoint(CGPoint(x: 25.83, y: 8.48))
        clipPath.addLineToPoint(CGPoint(x: 22.75, y: 8.94))
        clipPath.addCurveToPoint(CGPoint(x: 21.63, y: 7.37), controlPoint1: CGPoint(x: 22.43, y: 8.38), controlPoint2: CGPoint(x: 22.05, y: 7.85))
        clipPath.addLineToPoint(CGPoint(x: 23.2, y: 4.24))
        clipPath.addLineToPoint(CGPoint(x: 20.7, y: 2.42))
        clipPath.addLineToPoint(CGPoint(x: 18.25, y: 4.82))
        clipPath.addCurveToPoint(CGPoint(x: 16.13, y: 4.11), controlPoint1: CGPoint(x: 17.58, y: 4.51), controlPoint2: CGPoint(x: 16.87, y: 4.27))
        clipPath.addLineToPoint(CGPoint(x: 15.62, y: 1))
        clipPath.addLineToPoint(CGPoint(x: 12.41, y: 1))
        clipPath.addLineToPoint(CGPoint(x: 11.88, y: 4.11))
        clipPath.addCurveToPoint(CGPoint(x: 10.22, y: 4.62), controlPoint1: CGPoint(x: 11.31, y: 4.23), controlPoint2: CGPoint(x: 10.75, y: 4.4))
        clipPath.addLineToPoint(CGPoint(x: 7.98, y: 2.41))
        clipPath.addLineToPoint(CGPoint(x: 5.48, y: 4.23))
        clipPath.addLineToPoint(CGPoint(x: 6.81, y: 6.9))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 14, y: 21.18))
        clipPath.addCurveToPoint(CGPoint(x: 21.18, y: 14), controlPoint1: CGPoint(x: 17.97, y: 21.18), controlPoint2: CGPoint(x: 21.18, y: 17.97))
        clipPath.addCurveToPoint(CGPoint(x: 14, y: 6.81), controlPoint1: CGPoint(x: 21.18, y: 10.03), controlPoint2: CGPoint(x: 17.97, y: 6.81))
        clipPath.addCurveToPoint(CGPoint(x: 6.81, y: 14), controlPoint1: CGPoint(x: 10.03, y: 6.81), controlPoint2: CGPoint(x: 6.81, y: 10.03))
        clipPath.addCurveToPoint(CGPoint(x: 14, y: 21.18), controlPoint1: CGPoint(x: 6.81, y: 17.97), controlPoint2: CGPoint(x: 10.03, y: 21.18))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: -3.78, y: -4, width: 35.55, height: 35.8))
        fillColor23.setFill()
        rectanglePath.fill()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawTabBarBMSelectedBMImage() {
        //// Color Declarations
        let fillColor22 = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 0, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 14, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 14, y: 24))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 24))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 7, y: 15.6))
        bezierPath.addLineToPoint(CGPoint(x: 13.42, y: 24))
        bezierPath.addLineToPoint(CGPoint(x: 0.58, y: 24))
        bezierPath.addLineToPoint(CGPoint(x: 7, y: 15.6))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor22.setFill()
        bezierPath.fill()
    }

    public class func drawTabBarBMImageFlat() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let strokeColor8 = UIColor(red: 0.290, green: 0.290, blue: 0.290, alpha: 1.000)

        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 0, y: 0))
        clipPath.addLineToPoint(CGPoint(x: 14, y: 0))
        clipPath.addLineToPoint(CGPoint(x: 14, y: 24))
        clipPath.addLineToPoint(CGPoint(x: 0, y: 24))
        clipPath.addLineToPoint(CGPoint(x: 0, y: 0))
        clipPath.closePath()
        clipPath.moveToPoint(CGPoint(x: 7, y: 15.6))
        clipPath.addLineToPoint(CGPoint(x: 13.42, y: 24))
        clipPath.addLineToPoint(CGPoint(x: 0.58, y: 24))
        clipPath.addLineToPoint(CGPoint(x: 7, y: 15.6))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 0, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 14, y: 0))
        bezierPath.addLineToPoint(CGPoint(x: 14, y: 24))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 24))
        bezierPath.addLineToPoint(CGPoint(x: 0, y: 0))
        bezierPath.closePath()
        bezierPath.moveToPoint(CGPoint(x: 7, y: 15.6))
        bezierPath.addLineToPoint(CGPoint(x: 13.42, y: 24))
        bezierPath.addLineToPoint(CGPoint(x: 0.58, y: 24))
        bezierPath.addLineToPoint(CGPoint(x: 7, y: 15.6))
        bezierPath.closePath()
        strokeColor8.setStroke()
        bezierPath.lineWidth = 2
        bezierPath.stroke()


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)
    }

    public class func drawTabBarArchiveSelectedImage() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor22 = UIColor(red: 0.906, green: 0.298, blue: 0.235, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 6.73, y: 15.15))
        bezierPath.addCurveToPoint(CGPoint(x: 8.22, y: 13.65), controlPoint1: CGPoint(x: 6.73, y: 14.32), controlPoint2: CGPoint(x: 7.4, y: 13.65))
        bezierPath.addLineToPoint(CGPoint(x: 27.23, y: 13.65))
        bezierPath.addCurveToPoint(CGPoint(x: 28.73, y: 15.15), controlPoint1: CGPoint(x: 28.06, y: 13.65), controlPoint2: CGPoint(x: 28.73, y: 14.32))
        bezierPath.addLineToPoint(CGPoint(x: 28.73, y: 15.15))
        bezierPath.addCurveToPoint(CGPoint(x: 27.23, y: 16.65), controlPoint1: CGPoint(x: 28.73, y: 15.98), controlPoint2: CGPoint(x: 28.06, y: 16.65))
        bezierPath.addLineToPoint(CGPoint(x: 8.22, y: 16.65))
        bezierPath.addCurveToPoint(CGPoint(x: 6.73, y: 15.15), controlPoint1: CGPoint(x: 7.4, y: 16.65), controlPoint2: CGPoint(x: 6.73, y: 15.99))
        bezierPath.addLineToPoint(CGPoint(x: 6.73, y: 15.15))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor22.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 7.73, y: 10.15))
        bezier2Path.addCurveToPoint(CGPoint(x: 9.22, y: 8.65), controlPoint1: CGPoint(x: 7.73, y: 9.32), controlPoint2: CGPoint(x: 8.4, y: 8.65))
        bezier2Path.addLineToPoint(CGPoint(x: 28.23, y: 8.65))
        bezier2Path.addCurveToPoint(CGPoint(x: 29.73, y: 10.15), controlPoint1: CGPoint(x: 29.06, y: 8.65), controlPoint2: CGPoint(x: 29.73, y: 9.32))
        bezier2Path.addLineToPoint(CGPoint(x: 29.73, y: 10.15))
        bezier2Path.addCurveToPoint(CGPoint(x: 28.23, y: 11.65), controlPoint1: CGPoint(x: 29.73, y: 10.98), controlPoint2: CGPoint(x: 29.06, y: 11.65))
        bezier2Path.addLineToPoint(CGPoint(x: 9.22, y: 11.65))
        bezier2Path.addCurveToPoint(CGPoint(x: 7.73, y: 10.15), controlPoint1: CGPoint(x: 8.4, y: 11.65), controlPoint2: CGPoint(x: 7.73, y: 10.99))
        bezier2Path.addLineToPoint(CGPoint(x: 7.73, y: 10.15))
        bezier2Path.closePath()
        bezier2Path.usesEvenOddFillRule = true;

        fillColor22.setFill()
        bezier2Path.fill()


        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 2.11, y: 22.3))
        clipPath.addCurveToPoint(CGPoint(x: 1.05, y: 20.47), controlPoint1: CGPoint(x: 1.31, y: 22.09), controlPoint2: CGPoint(x: 0.84, y: 21.27))
        clipPath.addLineToPoint(CGPoint(x: 5.97, y: 2.11))
        clipPath.addCurveToPoint(CGPoint(x: 7.81, y: 1.05), controlPoint1: CGPoint(x: 6.18, y: 1.31), controlPoint2: CGPoint(x: 7, y: 0.84))
        clipPath.addLineToPoint(CGPoint(x: 7.81, y: 1.05))
        clipPath.addCurveToPoint(CGPoint(x: 8.87, y: 2.88), controlPoint1: CGPoint(x: 8.61, y: 1.27), controlPoint2: CGPoint(x: 9.08, y: 2.09))
        clipPath.addLineToPoint(CGPoint(x: 3.95, y: 21.25))
        clipPath.addCurveToPoint(CGPoint(x: 2.11, y: 22.3), controlPoint1: CGPoint(x: 3.74, y: 22.04), controlPoint2: CGPoint(x: 2.92, y: 22.52))
        clipPath.addLineToPoint(CGPoint(x: 2.11, y: 22.3))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4.98, 11.7)
        CGContextRotateCTM(context, 15 * CGFloat(M_PI) / 180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -6.5, y: -16, width: 13, height: 32))
        fillColor22.setFill()
        rectanglePath.fill()

        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 5.73, y: 20.15))
        bezier4Path.addCurveToPoint(CGPoint(x: 7.22, y: 18.65), controlPoint1: CGPoint(x: 5.73, y: 19.32), controlPoint2: CGPoint(x: 6.4, y: 18.65))
        bezier4Path.addLineToPoint(CGPoint(x: 26.23, y: 18.65))
        bezier4Path.addCurveToPoint(CGPoint(x: 27.73, y: 20.15), controlPoint1: CGPoint(x: 27.06, y: 18.65), controlPoint2: CGPoint(x: 27.73, y: 19.32))
        bezier4Path.addLineToPoint(CGPoint(x: 27.73, y: 20.15))
        bezier4Path.addCurveToPoint(CGPoint(x: 26.23, y: 21.65), controlPoint1: CGPoint(x: 27.73, y: 20.98), controlPoint2: CGPoint(x: 27.06, y: 21.65))
        bezier4Path.addLineToPoint(CGPoint(x: 7.22, y: 21.65))
        bezier4Path.addCurveToPoint(CGPoint(x: 5.73, y: 20.15), controlPoint1: CGPoint(x: 6.4, y: 21.65), controlPoint2: CGPoint(x: 5.73, y: 20.99))
        bezier4Path.addLineToPoint(CGPoint(x: 5.73, y: 20.15))
        bezier4Path.closePath()
        bezier4Path.usesEvenOddFillRule = true;

        fillColor22.setFill()
        bezier4Path.fill()
    }

    public class func drawTabBarArchiveImageFlat() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let fillColor25 = UIColor(red: 0.290, green: 0.290, blue: 0.290, alpha: 1.000)

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 6.73, y: 15.15))
        bezierPath.addCurveToPoint(CGPoint(x: 8.22, y: 13.65), controlPoint1: CGPoint(x: 6.73, y: 14.32), controlPoint2: CGPoint(x: 7.4, y: 13.65))
        bezierPath.addLineToPoint(CGPoint(x: 27.23, y: 13.65))
        bezierPath.addCurveToPoint(CGPoint(x: 28.73, y: 15.15), controlPoint1: CGPoint(x: 28.06, y: 13.65), controlPoint2: CGPoint(x: 28.73, y: 14.32))
        bezierPath.addLineToPoint(CGPoint(x: 28.73, y: 15.15))
        bezierPath.addCurveToPoint(CGPoint(x: 27.23, y: 16.65), controlPoint1: CGPoint(x: 28.73, y: 15.98), controlPoint2: CGPoint(x: 28.06, y: 16.65))
        bezierPath.addLineToPoint(CGPoint(x: 8.22, y: 16.65))
        bezierPath.addCurveToPoint(CGPoint(x: 6.73, y: 15.15), controlPoint1: CGPoint(x: 7.4, y: 16.65), controlPoint2: CGPoint(x: 6.73, y: 15.99))
        bezierPath.addLineToPoint(CGPoint(x: 6.73, y: 15.15))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor25.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.moveToPoint(CGPoint(x: 7.73, y: 10.15))
        bezier2Path.addCurveToPoint(CGPoint(x: 9.22, y: 8.65), controlPoint1: CGPoint(x: 7.73, y: 9.32), controlPoint2: CGPoint(x: 8.4, y: 8.65))
        bezier2Path.addLineToPoint(CGPoint(x: 28.23, y: 8.65))
        bezier2Path.addCurveToPoint(CGPoint(x: 29.73, y: 10.15), controlPoint1: CGPoint(x: 29.06, y: 8.65), controlPoint2: CGPoint(x: 29.73, y: 9.32))
        bezier2Path.addLineToPoint(CGPoint(x: 29.73, y: 10.15))
        bezier2Path.addCurveToPoint(CGPoint(x: 28.23, y: 11.65), controlPoint1: CGPoint(x: 29.73, y: 10.98), controlPoint2: CGPoint(x: 29.06, y: 11.65))
        bezier2Path.addLineToPoint(CGPoint(x: 9.22, y: 11.65))
        bezier2Path.addCurveToPoint(CGPoint(x: 7.73, y: 10.15), controlPoint1: CGPoint(x: 8.4, y: 11.65), controlPoint2: CGPoint(x: 7.73, y: 10.99))
        bezier2Path.addLineToPoint(CGPoint(x: 7.73, y: 10.15))
        bezier2Path.closePath()
        bezier2Path.usesEvenOddFillRule = true;

        fillColor25.setFill()
        bezier2Path.fill()


        //// Group 3
        CGContextSaveGState(context)
        CGContextBeginTransparencyLayer(context, nil)

        //// Clip Clip
        let clipPath = UIBezierPath()
        clipPath.moveToPoint(CGPoint(x: 2.11, y: 22.3))
        clipPath.addCurveToPoint(CGPoint(x: 1.05, y: 20.47), controlPoint1: CGPoint(x: 1.31, y: 22.09), controlPoint2: CGPoint(x: 0.84, y: 21.27))
        clipPath.addLineToPoint(CGPoint(x: 5.97, y: 2.11))
        clipPath.addCurveToPoint(CGPoint(x: 7.81, y: 1.05), controlPoint1: CGPoint(x: 6.18, y: 1.31), controlPoint2: CGPoint(x: 7, y: 0.84))
        clipPath.addLineToPoint(CGPoint(x: 7.81, y: 1.05))
        clipPath.addCurveToPoint(CGPoint(x: 8.87, y: 2.88), controlPoint1: CGPoint(x: 8.61, y: 1.27), controlPoint2: CGPoint(x: 9.08, y: 2.09))
        clipPath.addLineToPoint(CGPoint(x: 3.95, y: 21.25))
        clipPath.addCurveToPoint(CGPoint(x: 2.11, y: 22.3), controlPoint1: CGPoint(x: 3.74, y: 22.04), controlPoint2: CGPoint(x: 2.92, y: 22.52))
        clipPath.addLineToPoint(CGPoint(x: 2.11, y: 22.3))
        clipPath.closePath()
        clipPath.usesEvenOddFillRule = true;

        clipPath.addClip()


        //// Rectangle Drawing
        CGContextSaveGState(context)
        CGContextTranslateCTM(context, 4.98, 11.7)
        CGContextRotateCTM(context, 15 * CGFloat(M_PI) / 180)

        let rectanglePath = UIBezierPath(rect: CGRect(x: -6.5, y: -16, width: 13, height: 32))
        fillColor25.setFill()
        rectanglePath.fill()

        CGContextRestoreGState(context)


        CGContextEndTransparencyLayer(context)
        CGContextRestoreGState(context)


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.moveToPoint(CGPoint(x: 5.73, y: 20.15))
        bezier4Path.addCurveToPoint(CGPoint(x: 7.22, y: 18.65), controlPoint1: CGPoint(x: 5.73, y: 19.32), controlPoint2: CGPoint(x: 6.4, y: 18.65))
        bezier4Path.addLineToPoint(CGPoint(x: 26.23, y: 18.65))
        bezier4Path.addCurveToPoint(CGPoint(x: 27.73, y: 20.15), controlPoint1: CGPoint(x: 27.06, y: 18.65), controlPoint2: CGPoint(x: 27.73, y: 19.32))
        bezier4Path.addLineToPoint(CGPoint(x: 27.73, y: 20.15))
        bezier4Path.addCurveToPoint(CGPoint(x: 26.23, y: 21.65), controlPoint1: CGPoint(x: 27.73, y: 20.98), controlPoint2: CGPoint(x: 27.06, y: 21.65))
        bezier4Path.addLineToPoint(CGPoint(x: 7.22, y: 21.65))
        bezier4Path.addCurveToPoint(CGPoint(x: 5.73, y: 20.15), controlPoint1: CGPoint(x: 6.4, y: 21.65), controlPoint2: CGPoint(x: 5.73, y: 20.99))
        bezier4Path.addLineToPoint(CGPoint(x: 5.73, y: 20.15))
        bezier4Path.closePath()
        bezier4Path.usesEvenOddFillRule = true;

        fillColor25.setFill()
        bezier4Path.fill()
    }

    public class func drawBlankImageArtwork() {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()

        //// Color Declarations
        let textForeground2 = UIColor(red: 0.000, green: 0.463, blue: 1.000, alpha: 1.000)
        let fillColor24 = UIColor(red: 0.948, green: 0.948, blue: 0.948, alpha: 1.000)

        //// Group 2


        //// Group 3
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.moveToPoint(CGPoint(x: 2, y: 4))
        bezierPath.addCurveToPoint(CGPoint(x: 3.99, y: 2), controlPoint1: CGPoint(x: 2, y: 2.89), controlPoint2: CGPoint(x: 2.9, y: 2))
        bezierPath.addLineToPoint(CGPoint(x: 56.01, y: 2))
        bezierPath.addCurveToPoint(CGPoint(x: 58, y: 4), controlPoint1: CGPoint(x: 57.11, y: 2), controlPoint2: CGPoint(x: 58, y: 2.9))
        bezierPath.addLineToPoint(CGPoint(x: 58, y: 80))
        bezierPath.addCurveToPoint(CGPoint(x: 56.01, y: 82), controlPoint1: CGPoint(x: 58, y: 81.11), controlPoint2: CGPoint(x: 57.1, y: 82))
        bezierPath.addLineToPoint(CGPoint(x: 3.99, y: 82))
        bezierPath.addCurveToPoint(CGPoint(x: 2, y: 80), controlPoint1: CGPoint(x: 2.89, y: 82), controlPoint2: CGPoint(x: 2, y: 81.1))
        bezierPath.addLineToPoint(CGPoint(x: 2, y: 4))
        bezierPath.closePath()
        bezierPath.usesEvenOddFillRule = true;

        fillColor24.setFill()
        bezierPath.fill()


        //// Label Drawing
        let labelRect = CGRect(x: 19.34, y: 13, width: 22.48, height: 19)
        let labelTextContent = NSString(string: "Add")
        let labelStyle = NSMutableParagraphStyle()
        labelStyle.alignment = .Center

        let labelFontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 12)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: labelStyle]

        let labelTextHeight: CGFloat = labelTextContent.boundingRectWithSize(CGSize(width: labelRect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: labelFontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, labelRect)
        labelTextContent.drawInRect(CGRect(x: labelRect.minX, y: labelRect.minY + (labelRect.height - labelTextHeight) / 2, width: labelRect.width, height: labelTextHeight), withAttributes: labelFontAttributes)
        CGContextRestoreGState(context)


        //// Label 2 Drawing
        let label2Rect = CGRect(x: 8.71, y: 28, width: 44.6, height: 19)
        let label2TextContent = NSString(string: "Artwork")
        let label2Style = NSMutableParagraphStyle()
        label2Style.alignment = .Center

        let label2FontAttributes = [NSFontAttributeName: UIFont(name: "HelveticaNeue", size: 12)!, NSForegroundColorAttributeName: textForeground2, NSParagraphStyleAttributeName: label2Style]

        let label2TextHeight: CGFloat = label2TextContent.boundingRectWithSize(CGSize(width: label2Rect.width, height: CGFloat.infinity), options: NSStringDrawingOptions.UsesLineFragmentOrigin, attributes: label2FontAttributes, context: nil).size.height
        CGContextSaveGState(context)
        CGContextClipToRect(context, label2Rect)
        label2TextContent.drawInRect(CGRect(x: label2Rect.minX, y: label2Rect.minY + (label2Rect.height - label2TextHeight) / 2, width: label2Rect.width, height: label2TextHeight), withAttributes: label2FontAttributes)
        CGContextRestoreGState(context)
    }

    //// Generated Images

    public class var imageOfCanvas1: UIImage {
        if Cache.imageOfCanvas1 != nil {
            return Cache.imageOfCanvas1!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 80, height: 80), false, 0)
            StyleKit.drawCanvas1()

        Cache.imageOfCanvas1 = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfCanvas1!
    }

    public class var imageOfBookmarkid: UIImage {
        if Cache.imageOfBookmarkid != nil {
            return Cache.imageOfBookmarkid!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 33, height: 36), false, 0)
            StyleKit.drawBookmarkid()

        Cache.imageOfBookmarkid = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfBookmarkid!
    }

    public class var imageOfBookmarkidSelected: UIImage {
        if Cache.imageOfBookmarkidSelected != nil {
            return Cache.imageOfBookmarkidSelected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 33, height: 36), false, 0)
            StyleKit.drawBookmarkidSelected()

        Cache.imageOfBookmarkidSelected = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfBookmarkidSelected!
    }

    public class var imageOfSettingsButtonImage: UIImage {
        if Cache.imageOfSettingsButtonImage != nil {
            return Cache.imageOfSettingsButtonImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 27, height: 27), false, 0)
            StyleKit.drawSettingsButtonImage()

        Cache.imageOfSettingsButtonImage = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfSettingsButtonImage!
    }

    public class var imageOfPopUpViewBM: UIImage {
        if Cache.imageOfPopUpViewBM != nil {
            return Cache.imageOfPopUpViewBM!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 48, height: 48), false, 0)
            StyleKit.drawPopUpViewBM()

        Cache.imageOfPopUpViewBM = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfPopUpViewBM!
    }

    public class var imageOfTabBarBMImage: UIImage {
        if Cache.imageOfTabBarBMImage != nil {
            return Cache.imageOfTabBarBMImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 13, height: 23), false, 0)
            StyleKit.drawTabBarBMImage()

        Cache.imageOfTabBarBMImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTabBarBMImage!
    }

    public class var imageOfTabBarArchiveImage: UIImage {
        if Cache.imageOfTabBarArchiveImage != nil {
            return Cache.imageOfTabBarArchiveImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 29, height: 22), false, 0)
            StyleKit.drawTabBarArchiveImage()

        Cache.imageOfTabBarArchiveImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTabBarArchiveImage!
    }

    public class var imageOfTBCellButtonBMImageFlat: UIImage {
        if Cache.imageOfTBCellButtonBMImageFlat != nil {
            return Cache.imageOfTBCellButtonBMImageFlat!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 32, height: 34), false, 0)
            StyleKit.drawTBCellButtonBMImageFlat()

        Cache.imageOfTBCellButtonBMImageFlat = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTBCellButtonBMImageFlat!
    }

    public class var imageOfNavBarCogButtonImageFlat: UIImage {
        if Cache.imageOfNavBarCogButtonImageFlat != nil {
            return Cache.imageOfNavBarCogButtonImageFlat!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 28, height: 28), false, 0)
            StyleKit.drawNavBarCogButtonImageFlat()

        Cache.imageOfNavBarCogButtonImageFlat = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfNavBarCogButtonImageFlat!
    }

    public class var imageOfTabBarBMSelectedBMImage: UIImage {
        if Cache.imageOfTabBarBMSelectedBMImage != nil {
            return Cache.imageOfTabBarBMSelectedBMImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 14, height: 24), false, 0)
            StyleKit.drawTabBarBMSelectedBMImage()

        Cache.imageOfTabBarBMSelectedBMImage = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabBarBMSelectedBMImage!
    }

    public class var imageOfTabBarBMImageFlat: UIImage {
        if Cache.imageOfTabBarBMImageFlat != nil {
            return Cache.imageOfTabBarBMImageFlat!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 14, height: 24), false, 0)
            StyleKit.drawTabBarBMImageFlat()

        Cache.imageOfTabBarBMImageFlat = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTabBarBMImageFlat!
    }

    public class var imageOfTabBarArchiveSelectedImage: UIImage {
        if Cache.imageOfTabBarArchiveSelectedImage != nil {
            return Cache.imageOfTabBarArchiveSelectedImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 23), false, 0)
            StyleKit.drawTabBarArchiveSelectedImage()

        Cache.imageOfTabBarArchiveSelectedImage = UIGraphicsGetImageFromCurrentImageContext().imageWithRenderingMode(.AlwaysOriginal)
        UIGraphicsEndImageContext()

        return Cache.imageOfTabBarArchiveSelectedImage!
    }

    public class var imageOfTabBarArchiveImageFlat: UIImage {
        if Cache.imageOfTabBarArchiveImageFlat != nil {
            return Cache.imageOfTabBarArchiveImageFlat!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 23), false, 0)
            StyleKit.drawTabBarArchiveImageFlat()

        Cache.imageOfTabBarArchiveImageFlat = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfTabBarArchiveImageFlat!
    }

    public class var imageOfBlankImageArtwork: UIImage {
        if Cache.imageOfBlankImageArtwork != nil {
            return Cache.imageOfBlankImageArtwork!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 60, height: 84), false, 0)
            StyleKit.drawBlankImageArtwork()

        Cache.imageOfBlankImageArtwork = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()

        return Cache.imageOfBlankImageArtwork!
    }

    //// Customization Infrastructure

    @IBOutlet var canvas1Targets: [AnyObject]! {
        get { return Cache.canvas1Targets }
        set {
            Cache.canvas1Targets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfCanvas1)
            }
        }
    }

    @IBOutlet var bookmarkidTargets: [AnyObject]! {
        get { return Cache.bookmarkidTargets }
        set {
            Cache.bookmarkidTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfBookmarkid)
            }
        }
    }

    @IBOutlet var bookmarkidSelectedTargets: [AnyObject]! {
        get { return Cache.bookmarkidSelectedTargets }
        set {
            Cache.bookmarkidSelectedTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfBookmarkidSelected)
            }
        }
    }

    @IBOutlet var settingsButtonImageTargets: [AnyObject]! {
        get { return Cache.settingsButtonImageTargets }
        set {
            Cache.settingsButtonImageTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfSettingsButtonImage)
            }
        }
    }

    @IBOutlet var popUpViewBMTargets: [AnyObject]! {
        get { return Cache.popUpViewBMTargets }
        set {
            Cache.popUpViewBMTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfPopUpViewBM)
            }
        }
    }

    @IBOutlet var tabBarBMImageTargets: [AnyObject]! {
        get { return Cache.tabBarBMImageTargets }
        set {
            Cache.tabBarBMImageTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfTabBarBMImage)
            }
        }
    }

    @IBOutlet var tabBarArchiveImageTargets: [AnyObject]! {
        get { return Cache.tabBarArchiveImageTargets }
        set {
            Cache.tabBarArchiveImageTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfTabBarArchiveImage)
            }
        }
    }

    @IBOutlet var tBCellButtonBMImageFlatTargets: [AnyObject]! {
        get { return Cache.tBCellButtonBMImageFlatTargets }
        set {
            Cache.tBCellButtonBMImageFlatTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfTBCellButtonBMImageFlat)
            }
        }
    }

    @IBOutlet var navBarCogButtonImageFlatTargets: [AnyObject]! {
        get { return Cache.navBarCogButtonImageFlatTargets }
        set {
            Cache.navBarCogButtonImageFlatTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfNavBarCogButtonImageFlat)
            }
        }
    }

    @IBOutlet var tabBarBMSelectedBMImageTargets: [AnyObject]! {
        get { return Cache.tabBarBMSelectedBMImageTargets }
        set {
            Cache.tabBarBMSelectedBMImageTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfTabBarBMSelectedBMImage)
            }
        }
    }

    @IBOutlet var tabBarBMImageFlatTargets: [AnyObject]! {
        get { return Cache.tabBarBMImageFlatTargets }
        set {
            Cache.tabBarBMImageFlatTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfTabBarBMImageFlat)
            }
        }
    }

    @IBOutlet var tabBarArchiveSelectedImageTargets: [AnyObject]! {
        get { return Cache.tabBarArchiveSelectedImageTargets }
        set {
            Cache.tabBarArchiveSelectedImageTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfTabBarArchiveSelectedImage)
            }
        }
    }

    @IBOutlet var tabBarArchiveImageFlatTargets: [AnyObject]! {
        get { return Cache.tabBarArchiveImageFlatTargets }
        set {
            Cache.tabBarArchiveImageFlatTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfTabBarArchiveImageFlat)
            }
        }
    }

    @IBOutlet var blankImageArtworkTargets: [AnyObject]! {
        get { return Cache.blankImageArtworkTargets }
        set {
            Cache.blankImageArtworkTargets = newValue
            for target: AnyObject in newValue {
                target.performSelector(NSSelectorFromString("setImage:"), withObject: StyleKit.imageOfBlankImageArtwork)
            }
        }
    }

}
